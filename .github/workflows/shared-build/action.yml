name: "Shared Build Steps"
description: "Shared build steps for main and nightly"

runs:
  using: "composite"
  steps:
    - name: Store branch and latest SHA
      id: vars
      shell: bash
      run: |
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20.13"
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 10
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: node-modules-cache
      with:
        path: ~/.pnpm-store
        key: build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
        restore-keys: |
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}
          build-${{ env.cache-name }}
    - name: Cache pip
      uses: actions/cache@v4
      env:
        cache-name: pip-cache
      with:
        path: ~/.cache/pip
        key: build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
        restore-keys: |
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}
          build-${{ env.cache-name }}
    - run: python -m pip install --upgrade pip
      shell: bash
    - run: python -m pip install uv
      shell: bash
    - name: Install Django
      run: pip install "django>=5,<6"
      shell: bash
    - name: Setup testproject
      run: django-admin startproject testproject --extension py,json,yml,yaml,toml,mts --name Dockerfile,README.md,.env.example,.gitignore,.biomeignore,Makefile --template=.
      shell: bash
    - run: pnpm update
      shell: bash
      working-directory: testproject
    - run: pnpm install
      working-directory: testproject
      shell: bash
    - run: pnpm dedupe
      working-directory: testproject
      shell: bash
    - run: uv pip install -e ".[dev]" --system
      working-directory: testproject
      shell: bash
    - run: cp testproject/settings/local.py.example testproject/settings/local.py
      working-directory: testproject/backend
      shell: bash
    - run: cp .env.example .env
      working-directory: testproject/backend
      shell: bash
    - run: cd backend && uv run python manage.py makemigrations
      working-directory: testproject
      env:
        DATABASE_URL: "sqlite:///"
      shell: bash
    - run: cd backend && uv run python manage.py migrate
      working-directory: testproject
      env:
        DATABASE_URL: "sqlite:///"
      shell: bash
    - name: Generate backend schema
      run: cd backend && uv run python manage.py spectacular --color --file schema.yml
      working-directory: testproject
      env:
        DATABASE_URL: "sqlite:///"
      shell: bash
    - name: Generate frontend API client
      run: pnpm run openapi-ts
      working-directory: testproject
      shell: bash
    - run: pnpm run lint
      working-directory: testproject
      shell: bash
    - run: pnpm run build
      working-directory: testproject
      shell: bash
    - run: pnpm run test
      working-directory: testproject
      shell: bash
    - run: cd backend && uv run python manage.py test
      working-directory: testproject
      env:
        DATABASE_URL: "sqlite:///"
      shell: bash
    - name: Generate secret key
      run: echo "SECRET_KEY=$(python -c 'import uuid; print(uuid.uuid4().hex + uuid.uuid4().hex)')" >> $GITHUB_OUTPUT
      id: secret-id-generator
      shell: bash
    - run: rm .gitignore # prevents conflict with ruff
      shell: bash
    - run: cd backend && uv run ruff check .
      working-directory: testproject
      shell: bash
    - run: cd backend && uv run python manage.py makemigrations --check --dry-run
      working-directory: testproject
      env:
        DATABASE_URL: "sqlite:///"
      shell: bash
    - run: cd backend && uv run python manage.py check --deploy --fail-level WARNING
      working-directory: testproject
      env:
        SECRET_KEY: ${{ steps.secret-id-generator.outputs.SECRET_KEY }}
        SENDGRID_USERNAME: foo
        SENDGRID_PASSWORD: password
        DJANGO_SETTINGS_MODULE: "testproject.settings.production"
        ALLOWED_HOSTS: ".example.org"
        REDIS_URL: "redis://"
        DATABASE_URL: "sqlite:///"
      shell: bash