name: main
on: [push, pull_request]

jobs:
  build:
    name: Build Django-React-Boilerplate
    strategy:
      matrix:
        python: [3.12]
        node: [20.13]
    env:
      DATABASE_URL: "sqlite:///"
      REDIS_URL: "redis://"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Store branch and latest SHA
        run: |
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        id: git
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache_name: node-modules-cache
        with:
          path: ~/.pnpm-store
          key: build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
          restore-keys: |
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}
            build-${{ env.cache_name }}
      - name: Cache pip
        uses: actions/cache@v4
        env:
          cache_name: pip-cache
        with:
          path: ~/.cache/pip
          key: build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
          restore-keys: |
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}
            build-${{ env.cache_name }}
      - run: python -m pip install --upgrade pip
      - run: python -m pip install uv
      - run: curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
      - run: sudo apt-get install git-lfs --upgrade
      - run: uv pip install -e ".[dev]" --system
      - run: pnpm install
      - run: pnpm run build
      - run: pnpm run lint
      - name: Generate secret key
        run: echo "SECRET_KEY=$(python -c 'import uuid; print(uuid.uuid4().hex + uuid.uuid4().hex)')" >> $GITHUB_OUTPUT
        id: secret_id_generator
      - name: Linting
        run: cd backend && uv run ruff check .
        env:
          DJANGO_SETTINGS_MODULE: "project_name.settings.local_base"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
      - run: uv run pre-commit run --all-files
        env:
          SKIP: ruff,biome,missing-migrations,backend-schema,frontend-api
      - run: cd backend && uv run python manage.py makemigrations --check --dry-run
        env:
          DJANGO_SETTINGS_MODULE: "project_name.settings.production"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
      - run: cd backend && uv run python manage.py check --deploy
        env:
          DJANGO_SETTINGS_MODULE: "project_name.settings.production"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
      - run: |
          cd backend
          uv run coverage run manage.py test
          mkdir -p junit
          uv run coverage xml -o junit/test-results.xml
        env:
          DJANGO_SETTINGS_MODULE: "project_name.settings.test"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          REDIS_URL: "redis://"
      - run: pnpm run test